#pragma checksum "C:\Users\marku\Documents\ASP net\ArtifactRandom\ArtifactRandom\Pages\RandomDeck.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d871d08ce10bfee2da0533728544590b3c73189f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ArtifactRandom.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using ArtifactRandom;
    using ArtifactRandom.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/randomdeckcreator")]
    public class RandomDeck : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 14 "C:\Users\marku\Documents\ASP net\ArtifactRandom\ArtifactRandom\Pages\RandomDeck.cshtml"
            

    int counter = 0;
    IList<NewDeck> decks = new List<NewDeck>();
    static Random rnd = new Random();

    private void AddDeck()
    {
        counter++;
        string deck = DeckCodeCreation(0, 0, 0, 0, 0, 0);
        decks.Add(new NewDeck { Code = deck });
    }

    private string DeckCodeCreation(int redHeroes, int greenHeroes, int blackHeroes, int blueHeroes, int amountOfCards, int items)
    {
        string code;
        int maxCards = 40;
        int cardsInDeck = 15; //5 heroes x 3
        int maxItems = 9;
        int itemsInDeck = 0;
        int amountOfRedHeroes = 0;
        int amountOfGreenHeroes = 0;
        int amountOfBlueHeroes = 0;
        int amountOfBlackHeroes = 0;

        if (amountOfCards != 0)
        {
            maxCards = amountOfCards;
        }
        if(items != 0)
        {
            maxItems = items;
        }
        amountOfRedHeroes += redHeroes;
        amountOfGreenHeroes += greenHeroes;
        amountOfBlueHeroes += blueHeroes;
        amountOfBlackHeroes += blackHeroes;

        Cards cards = new Cards();
        Deck deck = new Deck();
        deck.Name = "Meta Breaker " + counter;
        deck.Heroes = new List<HeroRef>();
        deck.Cards = new List<CardRef>();

        //no hero parameters given
        if ((redHeroes == 0) && (greenHeroes == 0) && (blackHeroes == 0) && (blueHeroes == 0))
        {
            //Choose 5 random heroes
            List<bool> colors = new List<bool>();
            bool red = false;
            bool green = false;
            bool blue = false;
            bool black = false;
            colors.Add(red);
            colors.Add(green);
            colors.Add(blue);
            colors.Add(black);

            //choose which colors we use
            bool randomedTrue = false;
            do
            {
                for (int i = 0; i < 4; i++)
                {
                    int useColor = rnd.Next(2);
                    if (useColor == 1)
                    {
                        colors[i] = true;
                        randomedTrue = true;
                    }
                }
            } while (!randomedTrue);

            int numberOfHeroes = 0;
            List<int> heroesToChoose = new List<int>();

            //random heroes
            while (numberOfHeroes < 5)
            {
                for (int i = 0; i < 4; i++)
                {
                    if (colors[i])
                    {
                        int random, hero;
                        numberOfHeroes++;
                        switch (i)
                        {
                            case 0: //red
                                random = rnd.Next(cards.redHeroes.Count());
                                hero = cards.redHeroes[random];
                                //get a unique hero
                                while (heroesToChoose.Contains(hero))
                                {
                                    random = rnd.Next(cards.redHeroes.Count());
                                    hero = cards.redHeroes[random];
                                }
                                heroesToChoose.Add(hero);
                                amountOfRedHeroes++;
                                break;
                            case 1: //green
                                random = rnd.Next(cards.greenHeroes.Count());
                                hero = cards.greenHeroes[random];
                                while (heroesToChoose.Contains(hero))
                                {
                                    random = rnd.Next(cards.greenHeroes.Count());
                                    hero = cards.greenHeroes[random];
                                }
                                heroesToChoose.Add(hero);
                                amountOfGreenHeroes++;
                                break;
                            case 2: //blue
                                random = rnd.Next(cards.blueHeroes.Count());
                                hero = cards.blueHeroes[random];
                                while (heroesToChoose.Contains(hero))
                                {
                                    random = rnd.Next(cards.blueHeroes.Count());
                                    hero = cards.blueHeroes[random];
                                }
                                heroesToChoose.Add(hero);
                                amountOfBlueHeroes++;
                                break;
                            case 3: //black
                                random = rnd.Next(cards.blackHeroes.Count());
                                hero = cards.blackHeroes[random];
                                while (heroesToChoose.Contains(hero))
                                {
                                    random = rnd.Next(cards.blackHeroes.Count);
                                    hero = cards.blackHeroes[random];
                                }
                                heroesToChoose.Add(hero);
                                amountOfBlackHeroes++;
                                break;
                        }
                    }
                    if (numberOfHeroes >= 5)
                    {
                        break;
                    }
                }
            }

            for (int i = 0; i < 5; i++)
            {
                if (i == 3)
                {
                    deck.Heroes.Add(new HeroRef { Id = heroesToChoose[i], Turn = 2 });
                }
                else if (i == 4)
                {
                    deck.Heroes.Add(new HeroRef { Id = heroesToChoose[i], Turn = 3 });
                }
                else
                {
                    deck.Heroes.Add(new HeroRef { Id = heroesToChoose[i], Turn = 1 });
                }
            }

            //lets choose nonhero cards
            bool deckHasRed = false;
            bool deckHasGreen = false;
            bool deckHasBlue = false;
            bool deckHasBlack = false;

            if(amountOfRedHeroes > 0)
            {
                deckHasRed = true;
            }
            if (amountOfGreenHeroes > 0)
            {
                deckHasGreen = true;
            }
            if (amountOfBlueHeroes > 0)
            {
                deckHasBlue = true;
            }
            if (amountOfBlackHeroes > 0)
            {
                deckHasBlack = true;
            }

            string colorPicked = "";
            int rng, cardId, copies = 0;
            List<int> redCardsThatCanBeAdded = cards.redCards;
            List<int> greenCardsThatCanBeAdded = cards.greenCards;
            List<int> blueCardsThatCanBeAdded = cards.blueCards;
            List<int> blackCardsThatCanBeAdded = cards.blackCards;

            while (cardsInDeck < maxCards)
            {
                //amount of copies of the card to be added
                copies = ChooseAmountOfCopies(cardsInDeck, maxCards);
                //random suitable color
                colorPicked = PickAColor(deckHasRed, deckHasGreen, deckHasBlue, deckHasBlack);
                switch (colorPicked)
                {
                    case "red":
                        rng = rnd.Next(redCardsThatCanBeAdded.Count());
                        cardId = redCardsThatCanBeAdded[rng];
                        deck.Cards.Add(new CardRef { Id = cardId, Count = copies });
                        //remove it from the list so the same card can't be added again
                        redCardsThatCanBeAdded.RemoveAt(rng);
                        break;
                    case "green":
                        rng = rnd.Next(greenCardsThatCanBeAdded.Count());
                        cardId = greenCardsThatCanBeAdded[rng];
                        deck.Cards.Add(new CardRef { Id = cardId, Count = copies });
                        greenCardsThatCanBeAdded.RemoveAt(rng);
                        break;
                    case "blue":
                        rng = rnd.Next(blueCardsThatCanBeAdded.Count());
                        cardId = blueCardsThatCanBeAdded[rng];
                        deck.Cards.Add(new CardRef { Id = cardId, Count = copies });
                        blueCardsThatCanBeAdded.RemoveAt(rng);
                        break;
                    case "black":
                        rng = rnd.Next(blackCardsThatCanBeAdded.Count());
                        cardId = blackCardsThatCanBeAdded[rng];
                        deck.Cards.Add(new CardRef { Id = cardId, Count = copies });
                        blackCardsThatCanBeAdded.RemoveAt(rng);
                        break;
                }

                cardsInDeck += copies;
            }

            List<int> itemsThatCanBeAdded = cards.items;
            //pick items
            while (itemsInDeck < maxItems)
            {
                rng = rnd.Next(itemsThatCanBeAdded.Count());
                cardId = itemsThatCanBeAdded[rng];
                copies = ChooseAmountOfCopies(itemsInDeck, maxItems);
                deck.Cards.Add(new CardRef { Id = cardId, Count = copies });
                itemsThatCanBeAdded.RemoveAt(rng);
                itemsInDeck += copies;
            }

            return ("https://playartifact.com/d/" + DeckEncoder.EncodeDeck(deck) + "\n");

        }
        code = "monkaS\n";

        return code;
    }

    /// <summary>
    /// Choose the amount of copies of the randomed card we want to add.
    /// </summary>
    /// <param name="currentCards"></param>
    /// <param name="maxCards"></param>
    /// <returns></returns>
    private int ChooseAmountOfCopies(int currentCards, int maxCards)
    {
        if ((maxCards - currentCards) > 2)
        {
            return rnd.Next(1, 4);
        }
        else if ((maxCards - currentCards) == 2)
        {
            return rnd.Next(1, 3);
        }
        else
        {
            return 1;
        }
    }

    private string PickAColor(bool red, bool green, bool blue, bool black)
    {
        int amountTrue = 0;
        if (red)
            amountTrue++;
        if (green)
            amountTrue++;
        if (blue)
            amountTrue++;
        if (black)
            amountTrue++;
        if(amountTrue == 1)
        {
            if (red)
                return "red";
            if (green)
                return "green";
            if (blue)
                return "blue";
            if (black)
                return "black";
        }
        //more than 1 was true: need rng
        int random = rnd.Next(4);
        while(true)
        {
            if(random == 0 && red == true)
            {
                return "red";
            }
            if (random == 1 && green == true)
            {
                return "green";
            }
            if (random == 2 && blue == true)
            {
                return "blue";
            }
            if (random == 3 && black == true)
            {
                return "black";
            }
            random = rnd.Next(4);
        }
    }


#line default
#line hidden
    }
}
#pragma warning restore 1591
